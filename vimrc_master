"
" Paul Dombkowski
" Global Vim options
" for vim and gvim
" version 2.0
"

"----------- General -----------
set nocompatible        " disable 'Vi' compatibility
let mapleader = "\\"    " set \ as the leader key, so that localleader can be useful
set textwidth=0         " linewidth to endless
set nowrap              " do not wrap lines automatically
set mousehide           " Hide the mouse when typing text
" set mouse=a
set cmdheight=2         " Make command line at bottom one lines high
set autoread            " Set to auto read when a file is changed from the outside
set ruler               " Always show current position
set history=400         " Sets how many lines of history VIM has to remember
set backspace=2         " allow backspacing over everything in insert mode
set viminfo='20,\"50    " use a .viminfo file - store no more than 50 lines
set history=400         " Sets how many lines of history VIM has to remember
"set lines=40 columns=80 " Sets initial window size
set wildmenu            " Turn on wild menu for autocompleting vim commands
set lazyredraw          " Do not redraw when running macros
set hidden              " Hide buffer when closing file instead of discarding it
set pastetoggle=<F12>   " Pastetoggle - Key for disabling autoindent when pasting from another program
set shell=bash          " Set shell to be bash
set autoindent          " Set autoindent
set encoding=utf-8      " Set encoding to UTF-8

"----------- Enable Plugins From Pathogen -----------
execute pathogen#infect()

"----------- Colors and Font for Terminal and GUI -----------
set background=dark

if has("gui_running")
    if has("gui_gtk2")
        winsize 90 43 " Sets initial window size
        winpos 767 35  " Sets initial window position
        set guifont=Droid\ Sans\ Mono\ 11
    elseif has("gui_macvim")
        set guifont=Menlo:h11
    elseif has("gui_win32")
        set guifont=Lucida_Console:h11:cDEFAULT
    endif
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
    colorscheme solarized
else
    " colorscheme deathstar
endif

"----------- Vimrc Options -----------
" fast reloading of the .vimrc
map <leader>s :source ~/.vimrc<CR>

" fast editing of .vimrc
map <leader>e :tabe! ~/.vimrc<CR>

" when _vimrc is edited, reload it
autocmd! BufWritePost .vimrc source ~/.vimrc
" vim:ft=vim:ts=4:sw=4:noet:fdm=marker:commentstring=\"\ %s:nowrap

"----------- File formats -----------
" favorite filetypes
set ffs=unix,dos,mac

nmap <leader>fd :se ff=dos<CR>
nmap <leader>fu :se ff=unix<CR>

"----------- Tags -----------
" configure tag file
set tags=~/.tagsfile
nnoremap <leader>g :!ROOT_DIR=`git rev-parse --show-toplevel 2>/dev/null` ctags -R --exclude='.git/*' --exclude="*.js" --exclude='*.pyc' --exclude='__init__.py' -a -o ~/.tagsfile ${ROOT_DIR:-~/code}<CR>

"----------- Tabs -----------
"set ts=4 sw=4 sts=4 et
set tabstop=4           " number of spaces that a <Tab> counts for
set shiftwidth=4        " number of spaces for each step of (auto)indent
set softtabstop=4       " number of spaces that a <Tab> counts for
set expandtab           " use spaces instead of tabs
"
" Keymap for changing tab values
" kernel edit mode
map <leader>ke :set ts=8 sw=8 sts=8 noet<CR>

" sass edit mode
map <leader>se :set ts=2 sw=2 sts=2 et<CR>

" normal edit mode
map <leader>ne :set ts=4 sw=4 sts=4 et<CR>

"----------- Search -----------
set incsearch            " incremental searching
set ignorecase smartcase " ignore case if the search pattern contains all lowercase
set hlsearch             " leave search pattern matches highlighted
nnoremap <CR> :noh<CR>  " clear highlighted searches with <CR>

" visual search
function! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"
    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")
    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    else
        execute "normal /" . l:pattern . "^M"
    endif
    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

vnoremap <silent> * :call VisualSearch('b')<CR>
vnoremap <silent> # :call VisualSearch('f')<CR>

"------------ Clean ------------

" show trailing whitespace as a '·'
set listchars=trail:·
set list

"----------- Keymaps -----------
" fast saving
nmap <leader>w :w!<CR>
nmap <leader>f :e ~/buffer<CR>
" use spacebar to insert a single character
nnoremap <Space> i <Esc>r
" use K as the opposite of J to split a line
nnoremap K i <Esc>ciw<CR><Esc>^
" use w with two ! to sudo save the current buffer
" wrap selection in __ :
vnoremap " s""<Esc>P
vnoremap ' s''<Esc>P
vnoremap ( s()<Esc>P
vnoremap [ s[]<Esc>P
vnoremap ` s``<Esc>P
vnoremap { s{}<Esc>P
cmap w!! w !sudo tee % >/dev/null
" use the arrow keys and pagedown/pageup to move between buffers
nnoremap <silent><PageDown> :tabnext<CR>
nnoremap <silent><PageUp> :tabprevious<CR>
nnoremap <silent><Right> :wincmd l<CR>
nnoremap <silent><Left> :wincmd h<CR>
nnoremap <silent><Up> :wincmd k<CR>
nnoremap <silent><Down> :wincmd j<CR>
nnoremap <silent><C-Right> :vertical resize +1<CR>
nnoremap <silent><C-Left> :vertical resize -1<CR>
nnoremap <silent><C-Up> :resize +1<CR>
nnoremap <silent><C-Down> :resize -1<CR>

"----------- Syntax Highlighting -----------
syntax on                 " Turn on syntax highlighting
filetype plugin indent on " Enable filetype, plugin, and indent

" set some syntax highlighting filetypes
autocmd BufNewFile,BufRead *.php,*.inc setf php
autocmd BufNewFile,BufRead *.cst setf cst
autocmd BufNewFile,BufRead *.lua,*.rockspec setf lua

"----------- File type mappings -----------
" C/C++
autocmd BufNewFile,BufRead *.cpp map <buffer> <leader><Space> :w<CR>:make<CR>
autocmd BufNewFile,BufRead *.c map <buffer> <leader><Space> :w<CR>:make<CR>

"----------- Line Numbering -----------
set number              " Show line numbers

let g:rel_number = 0
function! RelativeNumberToggle()
    if g:rel_number
        setlocal norelativenumber
        let g:rel_number = 0
    else
        setlocal relativenumber
        let g:rel_number = 1
    endif
endfunction

nnoremap <silent> <leader>r :call RelativeNumberToggle()<CR>

"------------ Diff Tool ----------------

function! s:DiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

"-------------- Unite ------------------
nnoremap <Leader>f :Unite -start-insert file_rec
